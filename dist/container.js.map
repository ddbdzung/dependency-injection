{"version":3,"sources":["../src/container.ts"],"sourcesContent":["import \"reflect-metadata\";\n\ntype Ctr = { new (...args: any[]): any };\n\nimport { DeliverModule } from \"./deliver.module\";\nimport { OfficeModule } from \"./office.module\";\nimport { IUserModule } from \"./user.module.interface\";\nimport { IDeliverModule } from \"./deliver.module.interface\";\nimport { IOfficeModule } from \"./office.module.interface\";\nimport { UserModule } from \"./user.module\";\n\nclass DIContainer {\n  private _constructor2Instance: Map<Ctr, any> = new Map();\n\n  private static _instance: DIContainer;\n\n  public static getInstance(): DIContainer {\n    if (!DIContainer._instance) {\n      DIContainer._instance = new DIContainer();\n    }\n\n    return DIContainer._instance;\n  }\n\n  private constructor() {\n    // Prevent new instance\n  }\n\n  public getDependencyByCtr(ctr: Ctr) {\n    return this.construct(ctr);\n  }\n\n  public construct<T>(ctr: Ctr): T {\n    if (!ctr) {\n      throw new Error(\"ctr not found\", ctr);\n    }\n    console.log(\"[DEBUG][DzungDang] ctr:\", ctr);\n    if (this._constructor2Instance.has(ctr)) {\n      return this._constructor2Instance.get(ctr);\n    }\n\n    const params = Reflect.getMetadata(\"design:paramtypes\", ctr) || [];\n    const args = params.map(this.construct);\n    const instance = new ctr(...args);\n    this._constructor2Instance.set(ctr, instance);\n    return instance;\n  }\n\n  public get constructor2Instance() {\n    return this._constructor2Instance;\n  }\n}\n\nconst container = DIContainer.getInstance();\ncontainer.construct<IUserModule>(UserModule);\ncontainer.construct<IDeliverModule>(DeliverModule);\ncontainer.construct<IOfficeModule>(OfficeModule);\n\n// export function Injectable() {\n//   return (target: Ctr) => {\n//     Reflect.defineMetadata(\"design:paramtypes\", [], target);\n//   };\n// }\nexport function Injectable() {\n  return (target: Ctr) => {\n    Reflect.defineMetadata(\"design:paramtypes\", [], target);\n  };\n}\n\n// export function Inject() {\n//   return (target: any, key: string | symbol | undefined, index: number) => {\n//     const paramTypes = Reflect.getMetadata(\"design:paramtypes\", target) || [];\n//     console.log(\"[DEBUG][DzungDang] paramTypes:\", paramTypes);\n//     const dependencyCtor = paramTypes[index];\n\n//     if (!dependencyCtor) {\n//       throw new Error(`No constructor parameter type found at index ${index}`);\n//     }\n\n//     // Store the dependency information in the target's metadata\n//     if (!target.constructor.injectDependencies) {\n//       target.constructor.injectDependencies = [];\n//     }\n//     target.constructor.injectDependencies[index] = dependencyCtor;\n//   };\n// }\n\nexport { container };\n"],"names":["Injectable","container","DIContainer","_constructor2Instance","Map","getDependencyByCtr","ctr","construct","Error","console","log","has","get","params","Reflect","getMetadata","args","map","instance","set","getInstance","_instance","constructor2Instance","UserModule","DeliverModule","OfficeModule","target","defineMetadata"],"mappings":";;;;;;;;;;;IA+DgBA,UAAU;eAAVA;;IAwBPC,SAAS;eAATA;;;QAvFF;6BAIuB;4BACD;0BAIF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3B,IAAA,AAAMC,4BAAD,AAAL;;aAAMA;aACIC,wBAAuC,IAAIC;;iBAD/CF;IAiBJ,OAAOG,kBAEN,GAFD,SAAOA,mBAAmBC,GAAQ;QAChC,OAAO,IAAI,CAACC,SAAS,CAACD;IACxB;IAEA,OAAOC,SAcN,GAdD,SAAOA,UAAaD,GAAQ;QAC1B,IAAI,CAACA,KAAK;YACR,MAAM,IAAIE,MAAM,iBAAiBF;QACnC;QACAG,QAAQC,GAAG,CAAC,2BAA2BJ;QACvC,IAAI,IAAI,CAACH,qBAAqB,CAACQ,GAAG,CAACL,MAAM;YACvC,OAAO,IAAI,CAACH,qBAAqB,CAACS,GAAG,CAACN;QACxC;QAEA,IAAMO,SAASC,QAAQC,WAAW,CAAC,qBAAqBT,QAAQ,EAAE;QAClE,IAAMU,OAAOH,OAAOI,GAAG,CAAC,IAAI,CAACV,SAAS;QACtC,IAAMW,WAAW,WAAIZ,eAAOU;QAC5B,IAAI,CAACb,qBAAqB,CAACgB,GAAG,CAACb,KAAKY;QACpC,OAAOA;IACT;IAnCIhB,YAKUkB,WAMb,GAND,SAAcA;QACZ,IAAI,CAAClB,AANHA,YAMemB,SAAS,EAAE;YAN1BnB,YAOYmB,SAAS,GAAG,IAPxBnB;QAQF;QAEA,OAAOA,AAVLA,YAUiBmB,SAAS;IAC9B;kBAXInB;;YAqCOoB,KAAAA;iBAAX;gBACE,OAAO,IAAI,CAACnB,qBAAqB;YACnC;;;WAvCID;;AA0CN,IAAMD,YAAYC,YAAYkB,WAAW;AACzCnB,UAAUM,SAAS,CAAcgB,sBAAU;AAC3CtB,UAAUM,SAAS,CAAiBiB,4BAAa;AACjDvB,UAAUM,SAAS,CAAgBkB,0BAAY;AAOxC,SAASzB;IACd,OAAO,SAAC0B;QACNZ,QAAQa,cAAc,CAAC,qBAAqB,EAAE,EAAED;IAClD;AACF"}