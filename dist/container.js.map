{"version":3,"sources":["../src/container.ts"],"sourcesContent":["import \"reflect-metadata\";\n\nconst INJECT_CLASS_METADATA_KEY = \"__INJECT_CLASS_METADATA_KEY__\";\n\nexport type Ctr<T = any> = new (...args: any[]) => T;\n\nimport { DeliverModule } from \"./deliver.module\";\nimport { OfficeModule } from \"./office.module\";\nimport { IUserModule } from \"./user.module.interface\";\nimport { IDeliverModule } from \"./deliver.module.interface\";\nimport { IOfficeModule } from \"./office.module.interface\";\nimport { UserModule } from \"./user.module\";\nimport { InjectionToken } from \"./token\";\n\nclass DIContainer {\n  private _constructor2Instance: Map<InjectionToken[\"token\"], any> = new Map();\n  private _tokenMap: Map<InjectionToken[\"token\"], Ctr<any>> = new Map();\n\n  private static _instance: DIContainer;\n\n  public static getInstance(): DIContainer {\n    if (!DIContainer._instance) {\n      DIContainer._instance = new DIContainer();\n    }\n\n    return DIContainer._instance;\n  }\n\n  private constructor() {\n    // Prevent new instance\n  }\n\n  public getDependencyByToken<T>(injectionToken: InjectionToken): T {\n    return this._constructor2Instance.get(injectionToken.token);\n  }\n\n  public bindToClass<T>(token: InjectionToken, ctr: Ctr): this {\n    this._tokenMap.set(token.token, ctr);\n    return this;\n  }\n\n  public get tokenMap() {\n    return this._tokenMap;\n  }\n\n  public getConstructorByToken(token: InjectionToken): Ctr {\n    if (this._tokenMap.has(token.token)) {\n      return this._tokenMap.get(token.token) as Ctr;\n    }\n\n    throw new Error(`Token ${String(token.token)} not bound`);\n  }\n\n  public construct<T>(ctr: Ctr, injectionToken: InjectionToken): T {\n    if (this._constructor2Instance.has(injectionToken.token)) {\n      return this._constructor2Instance.get(injectionToken.token);\n    }\n\n    // Load the constructor's param types\n    const params = Reflect.getMetadata(\"design:paramtypes\", ctr) || [];\n\n    const injectedMetadataList =\n      (Reflect.getMetadata(\n        \"__INJECT_CLASS_METADATA_KEY__\",\n        ctr\n      ) as IPayload[]) || [];\n\n    const injectedMetadataKeybyIndex = injectedMetadataList.reduce(\n      (acc, cur) => {\n        acc.set(cur.index, cur);\n\n        return acc;\n      },\n      new Map<number, IPayload>()\n    );\n\n    // Inject the dependencies\n    const args = params.map((param: unknown, paramIndex: number) => {\n      console.log(\"[DEBUG][DzungDang] param:\", param, paramIndex, ctr.name);\n\n      if (!injectedMetadataKeybyIndex.has(paramIndex)) {\n        console.log(\"[DEBUG][DzungDang] param is not injected:\", param);\n\n        // TODO: Handle case when param is not injected and is type of Class\n\n        console.log(\"[DEBUG][DzungDang] ---param:\", param?.name);\n        return param;\n      }\n\n      const injectionToken = (\n        injectedMetadataKeybyIndex.get(paramIndex) as IPayload\n      ).token;\n\n      const ctrByToken = this.getConstructorByToken(injectionToken);\n\n      return this.construct<T>(ctrByToken, injectionToken);\n    });\n\n    const instance = new ctr(...args);\n    this._constructor2Instance.set(injectionToken.token, instance);\n    return instance;\n  }\n\n  public get constructor2Instance() {\n    return this._constructor2Instance;\n  }\n}\n\nconst container = DIContainer.getInstance();\nconsole.log(\"[DEBUG][DzungDang] me fukin in here:\");\nconst userModuleToken = new InjectionToken(\"UserModule\");\nconst deliverModuleToken = new InjectionToken(\"DeliverModule\");\nconst officeModuleToken = new InjectionToken(\"OfficeModule\");\ncontainer.bindToClass(userModuleToken, UserModule);\ncontainer.bindToClass(deliverModuleToken, DeliverModule);\ncontainer.bindToClass(officeModuleToken, OfficeModule);\nconsole.log(\"[DEBUG][DzungDang] and u suck with DI Container here:\", container);\ncontainer.construct<IUserModule>(UserModule, userModuleToken);\ncontainer.construct<IDeliverModule>(DeliverModule, deliverModuleToken);\ncontainer.construct<IOfficeModule>(OfficeModule, officeModuleToken);\n\nexport function Injectable(target: Ctr, ...args: any[]) {\n  return target;\n}\n\nexport interface IPayload {\n  index: number;\n  token: InjectionToken;\n  sourceConstructor: Ctr;\n}\n\n/**\n * inject decorator to module to class constructor\n * @param target Target class\n * @param key Possible undefined cause it's parameter of constructor\n * @param index Indexing order of parameter in constructor\n */\nexport function Inject(token: InjectionToken) {\n  return (target: any, key: string | undefined, index: number) => {\n    const metadataKey = \"__INJECT_CLASS_METADATA_KEY__\";\n    // Define metadata to mark the injected constructor parameter\n    const payload: IPayload = {\n      index,\n      token,\n      sourceConstructor: target,\n    };\n\n    const metadataValue = Reflect.getMetadata(metadataKey, target) || [];\n    metadataValue.push(payload);\n\n    Reflect.defineMetadata(metadataKey, metadataValue, target);\n  };\n}\n\nexport { container };\n"],"names":["Inject","Injectable","container","INJECT_CLASS_METADATA_KEY","DIContainer","_constructor2Instance","Map","_tokenMap","getDependencyByToken","injectionToken","get","token","bindToClass","ctr","set","getConstructorByToken","has","Error","String","construct","params","Reflect","getMetadata","injectedMetadataList","injectedMetadataKeybyIndex","reduce","acc","cur","index","args","map","param","paramIndex","console","log","name","ctrByToken","instance","getInstance","_instance","tokenMap","constructor2Instance","userModuleToken","InjectionToken","deliverModuleToken","officeModuleToken","UserModule","DeliverModule","OfficeModule","target","key","metadataKey","payload","sourceConstructor","metadataValue","push","defineMetadata"],"mappings":";;;;;;;;;;;IAyIgBA,MAAM;eAANA;;IAhBAC,UAAU;eAAVA;;IAiCPC,SAAS;eAATA;;;QA1JF;6BAMuB;4BACD;0BAIF;qBACI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAV/B,IAAMC,4BAA4B;AAYlC,IAAA,AAAMC,4BAAD,AAAL;;aAAMA;aACIC,wBAA2D,IAAIC;aAC/DC,YAAoD,IAAID;;iBAF5DF;IAkBJ,OAAOI,oBAEN,GAFD,SAAOA,qBAAwBC,cAA8B;QAC3D,OAAO,IAAI,CAACJ,qBAAqB,CAACK,GAAG,CAACD,eAAeE,KAAK;IAC5D;IAEA,OAAOC,WAGN,GAHD,SAAOA,YAAeD,KAAqB,EAAEE,GAAQ;QACnD,IAAI,CAACN,SAAS,CAACO,GAAG,CAACH,MAAMA,KAAK,EAAEE;QAChC,OAAO,IAAI;IACb;IAMA,OAAOE,qBAMN,GAND,SAAOA,sBAAsBJ,KAAqB;QAChD,IAAI,IAAI,CAACJ,SAAS,CAACS,GAAG,CAACL,MAAMA,KAAK,GAAG;YACnC,OAAO,IAAI,CAACJ,SAAS,CAACG,GAAG,CAACC,MAAMA,KAAK;QACvC;QAEA,MAAM,IAAIM,MAAM,AAAC,WAAQC,OAAOP,MAAMA,KAAK,IAAE;IAC/C;IAEA,OAAOQ,SAgDN,GAhDD,SAAOA,UAAaN,GAAQ,EAAEJ,cAA8B;;QAC1D,IAAI,IAAI,CAACJ,qBAAqB,CAACW,GAAG,CAACP,eAAeE,KAAK,GAAG;YACxD,OAAO,IAAI,CAACN,qBAAqB,CAACK,GAAG,CAACD,eAAeE,KAAK;QAC5D;QAEA,qCAAqC;QACrC,IAAMS,SAASC,QAAQC,WAAW,CAAC,qBAAqBT,QAAQ,EAAE;QAElE,IAAMU,uBACJ,AAACF,QAAQC,WAAW,CAClB,iCACAT,QACkB,EAAE;QAExB,IAAMW,6BAA6BD,qBAAqBE,MAAM,CAC5D,SAACC,KAAKC;YACJD,IAAIZ,GAAG,CAACa,IAAIC,KAAK,EAAED;YAEnB,OAAOD;QACT,GACA,IAAIpB;QAGN,0BAA0B;QAC1B,IAAMuB,OAAOT,OAAOU,GAAG,CAAC,SAACC,OAAgBC;YACvCC,QAAQC,GAAG,CAAC,6BAA6BH,OAAOC,YAAYnB,IAAIsB,IAAI;YAEpE,IAAI,CAACX,2BAA2BR,GAAG,CAACgB,aAAa;gBAC/CC,QAAQC,GAAG,CAAC,6CAA6CH;gBAEzD,oEAAoE;gBAEpEE,QAAQC,GAAG,CAAC,gCAAgCH,yBAAAA,MAAOI,IAAI;gBACvD,OAAOJ;YACT;YAEA,IAAMtB,mBAAiB,AACrBe,2BAA2Bd,GAAG,CAACsB,YAC/BrB,KAAK;YAEP,IAAMyB,aAAa,MAAKrB,qBAAqB,CAACN;YAE9C,OAAO,MAAKU,SAAS,CAAIiB,YAAY3B;QACvC;QAEA,IAAM4B,WAAW,WAAIxB,eAAOgB;QAC5B,IAAI,CAACxB,qBAAqB,CAACS,GAAG,CAACL,eAAeE,KAAK,EAAE0B;QACrD,OAAOA;IACT;IAvFIjC,YAMUkC,WAMb,GAND,SAAcA;QACZ,IAAI,CAAClC,AAPHA,YAOemC,SAAS,EAAE;YAP1BnC,YAQYmC,SAAS,GAAG,IARxBnC;QASF;QAEA,OAAOA,AAXLA,YAWiBmC,SAAS;IAC9B;kBAZInC;;YA2BOoC,KAAAA;iBAAX;gBACE,OAAO,IAAI,CAACjC,SAAS;YACvB;;;YA4DWkC,KAAAA;iBAAX;gBACE,OAAO,IAAI,CAACpC,qBAAqB;YACnC;;;WA3FID;;AA8FN,IAAMF,YAAYE,YAAYkC,WAAW;AACzCL,QAAQC,GAAG,CAAC;AACZ,IAAMQ,kBAAkB,IAAIC,qBAAc,CAAC;AAC3C,IAAMC,qBAAqB,IAAID,qBAAc,CAAC;AAC9C,IAAME,oBAAoB,IAAIF,qBAAc,CAAC;AAC7CzC,UAAUU,WAAW,CAAC8B,iBAAiBI,sBAAU;AACjD5C,UAAUU,WAAW,CAACgC,oBAAoBG,4BAAa;AACvD7C,UAAUU,WAAW,CAACiC,mBAAmBG,0BAAY;AACrDf,QAAQC,GAAG,CAAC,yDAAyDhC;AACrEA,UAAUiB,SAAS,CAAc2B,sBAAU,EAAEJ;AAC7CxC,UAAUiB,SAAS,CAAiB4B,4BAAa,EAAEH;AACnD1C,UAAUiB,SAAS,CAAgB6B,0BAAY,EAAEH;AAE1C,SAAS5C,WAAWgD,MAAW;IAAE,IAAA,IAAA,OAAA,UAAA,QAAA,AAAGpB,OAAH,UAAA,OAAA,IAAA,OAAA,QAAA,OAAA,GAAA,OAAA,MAAA;QAAGA,KAAH,OAAA,KAAA,SAAA,CAAA,KAAc;;IACpD,OAAOoB;AACT;AAcO,SAASjD,OAAOW,KAAqB;IAC1C,OAAO,SAACsC,QAAaC,KAAyBtB;QAC5C,IAAMuB,cAAc;QACpB,6DAA6D;QAC7D,IAAMC,UAAoB;YACxBxB,OAAAA;YACAjB,OAAAA;YACA0C,mBAAmBJ;QACrB;QAEA,IAAMK,gBAAgBjC,QAAQC,WAAW,CAAC6B,aAAaF,WAAW,EAAE;QACpEK,cAAcC,IAAI,CAACH;QAEnB/B,QAAQmC,cAAc,CAACL,aAAaG,eAAeL;IACrD;AACF"}