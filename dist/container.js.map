{"version":3,"sources":["../src/container.ts"],"sourcesContent":["import \"reflect-metadata\";\n\nconst INJECT_CLASS_METADATA_KEY = \"__INJECT_CLASS_METADATA_KEY__\";\n\nfunction isNotClassConstructor(variable) {\n  // Check if the variable is a function\n  if (typeof variable !== \"function\") {\n    return true;\n  }\n\n  // Try to instantiate the function with `new`\n  try {\n    Reflect.construct(String, [], variable);\n  } catch (e) {\n    // If instantiation fails, it's not a class constructor\n    return true;\n  }\n\n  // If it passes both checks, it is a class constructor\n  return false;\n}\n\ntype Ctr = new (...args: any[]) => any;\n\nimport { DeliverModule } from \"./deliver.module\";\nimport { OfficeModule } from \"./office.module\";\nimport { IUserModule } from \"./user.module.interface\";\nimport { IDeliverModule } from \"./deliver.module.interface\";\nimport { IOfficeModule } from \"./office.module.interface\";\nimport { UserModule } from \"./user.module\";\n\nclass DIContainer {\n  private _constructor2Instance: Map<string, any> = new Map();\n\n  private static _instance: DIContainer;\n\n  public static getInstance(): DIContainer {\n    if (!DIContainer._instance) {\n      DIContainer._instance = new DIContainer();\n    }\n\n    return DIContainer._instance;\n  }\n\n  private constructor() {\n    // Prevent new instance\n  }\n\n  public getDependencyByCtr<T>(ctrName: string): T {\n    return this._constructor2Instance.get(ctrName);\n  }\n\n  public construct<T>(ctr: Ctr): T {\n    if (this._constructor2Instance.has(ctr.name)) {\n      return this._constructor2Instance.get(ctr.name);\n    }\n\n    // Load the constructor's param types\n    const params = Reflect.getMetadata(\"design:paramtypes\", ctr) || [];\n    const injectedMetadataIndexList = (\n      Reflect.getMetadata(\"__INJECT_CLASS_METADATA_KEY__\", ctr) || []\n    ).map((i) => i.index);\n\n    // Inject the dependencies\n    const args = params.map((param: any, paramIndex: number) => {\n      console.log(\"[DEBUG][DzungDang] param:\", param, paramIndex, ctr.name);\n      if (!injectedMetadataIndexList.includes(paramIndex)) {\n        console.log(\"[DEBUG][DzungDang] param is not injected:\", param);\n        return param;\n      }\n\n      return this.construct(param);\n    });\n\n    const instance = new ctr(...args);\n    this._constructor2Instance.set(ctr.name, instance);\n    return instance;\n  }\n\n  public get constructor2Instance() {\n    return this._constructor2Instance;\n  }\n}\n\nconst container = DIContainer.getInstance();\ncontainer.construct<IUserModule>(UserModule);\ncontainer.construct<IDeliverModule>(DeliverModule);\ncontainer.construct<IOfficeModule>(OfficeModule);\n\nexport function Injectable(target: Ctr, ...args: any[]) {\n  return target;\n}\n\nexport interface IPayload {\n  index: number;\n  classConstructor: Ctr;\n}\n\n/**\n * inject decorator to module to class constructor\n * @param target Target class\n * @param key Possible undefined cause it's parameter of constructor\n * @param index Indexing order of parameter in constructor\n */\nexport function Inject(target: any, key: string, index: number) {\n  const metadataKey = \"__INJECT_CLASS_METADATA_KEY__\";\n  // Define metadata to mark the injected constructor parameter\n  const payload: IPayload = {\n    index,\n    sourceConstructor: target,\n  };\n\n  const firstObj = Reflect.getMetadata(\"design:paramtypes\", target)[0];\n  console.log(\"[DEBUG][DzungDang] firstObj:\", firstObj);\n\n  const metadataValue = Reflect.getMetadata(metadataKey, target) || [];\n  metadataValue.push(payload);\n\n  Reflect.defineMetadata(metadataKey, metadataValue, target);\n}\n\nexport { container };\n"],"names":["Inject","Injectable","container","INJECT_CLASS_METADATA_KEY","isNotClassConstructor","variable","Reflect","construct","String","e","DIContainer","_constructor2Instance","Map","getDependencyByCtr","ctrName","get","ctr","has","name","params","getMetadata","injectedMetadataIndexList","map","i","index","args","param","paramIndex","console","log","includes","instance","set","getInstance","_instance","constructor2Instance","UserModule","DeliverModule","OfficeModule","target","key","metadataKey","payload","sourceConstructor","firstObj","metadataValue","push","defineMetadata"],"mappings":"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"}