{"version":3,"sources":["../src/container.ts"],"sourcesContent":["import \"reflect-metadata\";\n\nconst INJECT_CLASS_METADATA_KEY = \"__INJECT_CLASS_METADATA_KEY__\";\n\ntype Ctr = new (...args: any[]) => any;\n\nimport { DeliverModule } from \"./deliver.module\";\nimport { OfficeModule } from \"./office.module\";\nimport { IUserModule } from \"./user.module.interface\";\nimport { IDeliverModule } from \"./deliver.module.interface\";\nimport { IOfficeModule } from \"./office.module.interface\";\nimport { UserModule } from \"./user.module\";\nimport { InjectionToken } from \"./token\";\n\nclass DIContainer {\n  private _constructor2Instance: Map<InjectionToken<any>[\"token\"], any> =\n    new Map();\n\n  private static _instance: DIContainer;\n\n  public static getInstance(): DIContainer {\n    if (!DIContainer._instance) {\n      DIContainer._instance = new DIContainer();\n    }\n\n    return DIContainer._instance;\n  }\n\n  private constructor() {\n    // Prevent new instance\n  }\n\n  public getDependencyByCtr<T>(injectionToken: InjectionToken<T>): T {\n    return this._constructor2Instance.get(injectionToken.token);\n  }\n\n  public construct<T>(ctr: Ctr, injectionToken: InjectionToken<T>): T {\n    if (this._constructor2Instance.has(injectionToken.token)) {\n      return this._constructor2Instance.get(injectionToken.token);\n    }\n\n    // Load the constructor's param types\n    const params = Reflect.getMetadata(\"design:paramtypes\", ctr) || [];\n    const injectedMetadataIndexList = (\n      Reflect.getMetadata(\"__INJECT_CLASS_METADATA_KEY__\", ctr) || []\n    ).map((i: any) => i.index);\n\n    // Inject the dependencies\n    const args = params.map((param: any, paramIndex: number) => {\n      console.log(\"[DEBUG][DzungDang] param:\", param, paramIndex, ctr.name);\n      if (!injectedMetadataIndexList.includes(paramIndex)) {\n        console.log(\"[DEBUG][DzungDang] param is not injected:\", param);\n        return param;\n      }\n\n      return this.construct<T>(param, injectionToken);\n    });\n\n    const instance = new ctr(...args);\n    this._constructor2Instance.set(injectionToken.token, instance);\n    return instance;\n  }\n\n  public get constructor2Instance() {\n    return this._constructor2Instance;\n  }\n}\n\nconst container = DIContainer.getInstance();\ncontainer.construct<IUserModule>(\n  UserModule,\n  new InjectionToken<IUserModule>(\"UserModule\")\n);\ncontainer.construct<IDeliverModule>(\n  DeliverModule,\n  new InjectionToken<IDeliverModule>(\"DeliverModule\")\n);\ncontainer.construct<IOfficeModule>(\n  OfficeModule,\n  new InjectionToken<IOfficeModule>(\"OfficeModule\")\n);\n\nexport function Injectable(target: Ctr, ...args: any[]) {\n  return target;\n}\n\nexport interface IPayload {\n  index: number;\n  sourceConstructor: Ctr;\n}\n\n/**\n * inject decorator to module to class constructor\n * @param target Target class\n * @param key Possible undefined cause it's parameter of constructor\n * @param index Indexing order of parameter in constructor\n */\nexport function Inject(token: InjectionToken<any>) {\n  return (target: any, key: string | undefined, index: number) => {\n    const metadataKey = \"__INJECT_CLASS_METADATA_KEY__\";\n    // Define metadata to mark the injected constructor parameter\n    const payload: IPayload = {\n      index,\n      sourceConstructor: target,\n    };\n\n    const firstObj = Reflect.getMetadata(\"design:paramtypes\", target)[0];\n    console.log(\"[DEBUG][DzungDang] firstObj:\", firstObj);\n\n    const metadataValue = Reflect.getMetadata(metadataKey, target) || [];\n    metadataValue.push(payload);\n\n    Reflect.defineMetadata(metadataKey, metadataValue, target);\n  };\n}\n\nexport { container };\n"],"names":["Inject","Injectable","container","INJECT_CLASS_METADATA_KEY","DIContainer","_constructor2Instance","Map","getDependencyByCtr","injectionToken","get","token","construct","ctr","has","params","Reflect","getMetadata","injectedMetadataIndexList","map","i","index","args","param","paramIndex","console","log","name","includes","instance","set","getInstance","_instance","constructor2Instance","UserModule","InjectionToken","DeliverModule","OfficeModule","target","key","metadataKey","payload","sourceConstructor","firstObj","metadataValue","push","defineMetadata"],"mappings":";;;;;;;;;;;IAiGgBA,MAAM;eAANA;;IAfAC,UAAU;eAAVA;;IAkCPC,SAAS;eAATA;;;QApHF;6BAMuB;4BACD;0BAIF;qBACI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAV/B,IAAMC,4BAA4B;AAYlC,IAAA,AAAMC,4BAAD,AAAL;;aAAMA;aACIC,wBACN,IAAIC;;iBAFFF;IAkBJ,OAAOG,kBAEN,GAFD,SAAOA,mBAAsBC,cAAiC;QAC5D,OAAO,IAAI,CAACH,qBAAqB,CAACI,GAAG,CAACD,eAAeE,KAAK;IAC5D;IAEA,OAAOC,SAyBN,GAzBD,SAAOA,UAAaC,GAAQ,EAAEJ,cAAiC;;QAC7D,IAAI,IAAI,CAACH,qBAAqB,CAACQ,GAAG,CAACL,eAAeE,KAAK,GAAG;YACxD,OAAO,IAAI,CAACL,qBAAqB,CAACI,GAAG,CAACD,eAAeE,KAAK;QAC5D;QAEA,qCAAqC;QACrC,IAAMI,SAASC,QAAQC,WAAW,CAAC,qBAAqBJ,QAAQ,EAAE;QAClE,IAAMK,4BAA4B,AAChCF,CAAAA,QAAQC,WAAW,CAAC,iCAAiCJ,QAAQ,EAAE,AAAD,EAC9DM,GAAG,CAAC,SAACC;mBAAWA,EAAEC,KAAK;;QAEzB,0BAA0B;QAC1B,IAAMC,OAAOP,OAAOI,GAAG,CAAC,SAACI,OAAYC;YACnCC,QAAQC,GAAG,CAAC,6BAA6BH,OAAOC,YAAYX,IAAIc,IAAI;YACpE,IAAI,CAACT,0BAA0BU,QAAQ,CAACJ,aAAa;gBACnDC,QAAQC,GAAG,CAAC,6CAA6CH;gBACzD,OAAOA;YACT;YAEA,OAAO,MAAKX,SAAS,CAAIW,OAAOd;QAClC;QAEA,IAAMoB,WAAW,WAAIhB,eAAOS;QAC5B,IAAI,CAAChB,qBAAqB,CAACwB,GAAG,CAACrB,eAAeE,KAAK,EAAEkB;QACrD,OAAOA;IACT;IA/CIxB,YAMU0B,WAMb,GAND,SAAcA;QACZ,IAAI,CAAC1B,AAPHA,YAOe2B,SAAS,EAAE;YAP1B3B,YAQY2B,SAAS,GAAG,IARxB3B;QASF;QAEA,OAAOA,AAXLA,YAWiB2B,SAAS;IAC9B;kBAZI3B;;YAiDO4B,KAAAA;iBAAX;gBACE,OAAO,IAAI,CAAC3B,qBAAqB;YACnC;;;WAnDID;;AAsDN,IAAMF,YAAYE,YAAY0B,WAAW;AACzC5B,UAAUS,SAAS,CACjBsB,sBAAU,EACV,IAAIC,qBAAc,CAAc;AAElChC,UAAUS,SAAS,CACjBwB,4BAAa,EACb,IAAID,qBAAc,CAAiB;AAErChC,UAAUS,SAAS,CACjByB,0BAAY,EACZ,IAAIF,qBAAc,CAAgB;AAG7B,SAASjC,WAAWoC,MAAW;IAAE,IAAA,IAAA,OAAA,UAAA,QAAA,AAAGhB,OAAH,UAAA,OAAA,IAAA,OAAA,QAAA,OAAA,GAAA,OAAA,MAAA;QAAGA,KAAH,OAAA,KAAA,SAAA,CAAA,KAAc;;IACpD,OAAOgB;AACT;AAaO,SAASrC,OAAOU,KAA0B;IAC/C,OAAO,SAAC2B,QAAaC,KAAyBlB;QAC5C,IAAMmB,cAAc;QACpB,6DAA6D;QAC7D,IAAMC,UAAoB;YACxBpB,OAAAA;YACAqB,mBAAmBJ;QACrB;QAEA,IAAMK,WAAW3B,QAAQC,WAAW,CAAC,qBAAqBqB,OAAO,CAAC,EAAE;QACpEb,QAAQC,GAAG,CAAC,gCAAgCiB;QAE5C,IAAMC,gBAAgB5B,QAAQC,WAAW,CAACuB,aAAaF,WAAW,EAAE;QACpEM,cAAcC,IAAI,CAACJ;QAEnBzB,QAAQ8B,cAAc,CAACN,aAAaI,eAAeN;IACrD;AACF"}